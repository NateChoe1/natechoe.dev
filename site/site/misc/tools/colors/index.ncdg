@%/site/head.html@
@=header A javascript color picker@

<div id=picker>
  <div id=reddiv class=slider>
    <div class="signifier left">Red:</div>
    <input class=picker type=range min=0 max=255 value=255 class=slider id=red>
    <div id=rednum class="signifier right"></div>
  </div>
  <div id=greendiv class=slider>
    <div class="signifier left">Green:</div>
    <input class=picker type=range min=0 max=255 value=255 class=slider id=green>
    <div id=greennum class="signifier right"></div>
  </div>
  <div id=bluediv class=slider>
    <div class="signifier left">Blue:</div>
    <input class=picker type=range min=0 max=255 value=255 class=slider id=blue>
    <div id=bluenum class="signifier right"></div>
  </div>

  <div id=huediv class=slider>
    <canvas id=hueback class=slideback></canvas>
    <div class="signifier left">Hue:</div>
    <input class="picker hsb" type=range min=0 max=360 value=0 class=slider id=hue>
    <div id=huenum class="signifier right"></div>
  </div>
  <div id=satdiv class=slider>
    <canvas id=satback class=slideback></canvas>
    <div class="signifier left">Saturation:</div>
    <input class="picker hsb" type=range min=0 max=100 value=100 class=slider id=sat>
    <div id=satnum class="signifier right"></div>
  </div>
  <div id=brightdiv class=slider>
    <canvas id=brightback class=slideback></canvas>
    <div class="signifier left">Brightness:</div>
    <input class="picker hsb" type=range min=0 max=100 value=100 class=slider id=bright>
    <div id=brightnum class="signifier right"></div>
  </div>

  <div id=preview></div>
  <p id=msg></p>
</div>

<style>
.slider {
	width: 100%;
	height: 30px;
	position: relative;
}

.signifier {
	position: absolute;
	top: 50%;
	transform: translate(0, -50%);
}

.signifier.left {
	left: 0;
}

.signifier.right {
	right: 0;
}

.picker {
	position: absolute;
	left: 70px;
	top: 50%;
	width: calc(100% - 100px);
	transform: translate(0, -50%);
	height: calc(100% - 5px);
	-webkit-appearance: none;
	border-radius: 5px;
}

.picker.hsb {
	background: transparent;
}

#red {
	background-image: linear-gradient(to right, rgb(0, var(--green), var(--blue)), rgb(255, var(--green), var(--blue)));
}

#green {
	background-image: linear-gradient(to right, rgb(var(--red), 0, var(--blue)), rgb(var(--red), 255, var(--blue)));
}

#blue {
	background-image: linear-gradient(to right, rgb(var(--red), var(--green), 0), rgb(var(--red), var(--green), 255));
}

#preview {
	width: 100%;
	height: 100px;
	border-radius: 5px;
}

#preview:hover {
	cursor: pointer;
}

#msg {
	display: none;
}

.slideback {
	position: absolute;
	border-radius: 5px;
	transform: translate(0, -50%);
};
</style>

<script>/*@&*/
/*
@@licstart  The following is the entire license notice for the JavaScript code in
this page.

Copyright (C) 2024  Nate Choe

The JavaScript code in this page is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public License (GNU GPL) as
published by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The code is distributed WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you may distribute
non-source (e.g., minimized or compacted) forms of that code without the copy of
the GNU GPL normally required by section 4, provided you include this license
notice and a URL through which recipients can access the Corresponding Source.


@@licend  The above is the entire license notice for the JavaScript code in this
page.
*/
</script>

<script>
/* Slider values are the ground truths.
 * updategroundSYSTEM treats SYSTEM as the proper ground truth, updates the
 * other sliders, then calles `update`.
 * updateSYSTEM treats rgb as the ground truth and updates SYSTEM
 * `update` updates some CSS variables and the color shown. */
var redslide, greenslide, blueslide, rgbsliders;
var rednum, greennum, bluenum;
var hueslide, satslide, brightslide, hsbsliders;
var huenum, satnum, brightnum;
var picker;
var preview;
var msg, msgtimeout;
var hueback, slideback, brightback;

function getcolor() {
	return {
		"red": Number(redslide.value),
		"green": Number(greenslide.value),
		"blue": Number(blueslide.value),
		"hue": Number(hueslide.value),
		"sat": Number(satslide.value),
		"bright": Number(brightslide.value),
	};
}

function colortostring(color) {
	return `#${color.red.toString(16).padStart(2, '0')}${color.green.toString(16).padStart(2, '0')}${color.blue.toString(16).padStart(2, 0)}`
}

function update() {
	color = getcolor();
	picker.style.setProperty("--red", color.red);
	picker.style.setProperty("--green", color.green);
	picker.style.setProperty("--blue", color.blue);

	preview.style.setProperty("background", `rgb(${color.red}, ${color.green}, ${color.blue})`);
	rednum.textContent = color.red;
	greennum.textContent = color.green;
	bluenum.textContent = color.blue;
	huenum.textContent = color.hue;
	satnum.textContent = color.sat;
	brightnum.textContent = color.bright;
}

function updategroundrgb() {
	updatehsb();
	update();
}

/* rgb is always correct by definition */
function updatergb() {
	return;
}

function updatehsb() {
	let r = redslide.value / 255;
	let g = greenslide.value / 255;
	let b = blueslide.value / 255;
	let v = Math.max(r, g, b);
	let c = v - Math.min(r, g, b);
	var h;
	if (c == 0) {
		h = 0;
	}
	else if (v == r) {
		h = 60 * (((g-b)/c+6) % 6);
	}
	else if (v == g) {
		h = 60 * ((b-r)/c + 2);
	}
	else /* if (v == b) */ {
		h = 60 * ((r-g)/c + 4);
	}
	let s = (v == 0) ? 0 : c/v;
	hueslide.value = Math.floor(h);
	satslide.value = Math.floor(s * 100);
	brightslide.value = Math.floor(v * 100);
	updatehsbbackground();
}

function hsb2rgb(hue, sat, bright) {
	/* This is a really nice formula (taken from Wikipedia) */
	hue = hue % 360;
	sat = sat / 100;
	bright = bright / 100;
	let c = bright * sat;
	let hp = hue / 60;
	let x = c * (1 - Math.abs(hp % 2 - 1));
	var r, g, b;
	switch (Math.floor(hp)) {
	case 0: r = c; g = x; b = 0; break;
	case 1: r = x; g = c; b = 0; break;
	case 2: r = 0; g = c; b = x; break;
	case 3: r = 0; g = x; b = c; break;
	case 4: r = x; g = 0; b = c; break;
	case 5: r = c; g = 0; b = x; break;
	}
	let m = bright - c;
	r += m;
	g += m;
	b += m;
	return {
		"red": Math.floor(r*256),
		"green": Math.floor(g*256),
		"blue": Math.floor(b*256),
	};
}

function updatebar(canvas, getcolor) {
	let computedstyle = getComputedStyle(canvas);
	/* https://stackoverflow.com/questions/25197184#29881817 */
	let width = canvas.width;
	let ctx = canvas.getContext("2d");
	for (var i = 0; i < width; ++i) {
		let color = getcolor(i / width);
		ctx.fillStyle = `rgb(${color.red}, ${color.green}, ${color.blue})`;
		ctx.fillRect(i, 0, 1, canvas.height);
	}
}

function updatehsbbackground() {
	let hue = Number(hueslide.value);
	let sat = Number(satslide.value);
	let bright = Number(brightslide.value);
	updatebar(hueback, (pos) => { return hsb2rgb(pos*360, sat, bright); });
	updatebar(satback, (pos) => { return hsb2rgb(hue, pos*100, bright); });
	updatebar(brightback, (pos) => { return hsb2rgb(hue, sat, pos*100); });
}

function updategroundhsb() {
	let hue = hueslide.value;
	let sat = satslide.value;
	let bright = brightslide.value;
	let color = hsb2rgb(hue, sat, bright);
	redslide.value = color.red;
	greenslide.value = color.green;
	blueslide.value = color.blue;
	updatehsbbackground();
	update();
}

function copycolor() {
	navigator.clipboard.writeText(colortostring(getcolor()));
}

function clearmsg() {
	msg.style.setProperty("display", "none");
}

function setmsg(message) {
	clearTimeout(msgtimeout);
	msg.textContent = message;
	msg.style.setProperty("display", "flow");
	msgtimeout = setTimeout(clearmsg, 2000);
}

function copycolorinteractive(e) {
	copycolor();
	setmsg("Copied!");
}

function stack(move, reference) {
	move.style.setProperty("left", `${reference.offsetLeft}px`);
	move.style.setProperty("top", `${reference.offsetTop}px`);
	move.style.setProperty("width", `${reference.offsetWidth}px`);
	move.style.setProperty("height", `${reference.offsetHeight}px`);
}

window.onload = function() {
	picker = document.getElementById("picker");
	preview = document.getElementById("preview");
	msg = document.getElementById("msg");
	canvas = document.getElementById("scratchcanvas");

	redslide = document.getElementById("red");
	greenslide = document.getElementById("green");
	blueslide = document.getElementById("blue");
	rednum = document.getElementById("rednum");
	greennum = document.getElementById("greennum");
	bluenum = document.getElementById("bluenum");

	hueslide = document.getElementById("hue");
	satslide = document.getElementById("sat");
	brightslide = document.getElementById("bright");
	huenum = document.getElementById("huenum");
	satnum = document.getElementById("satnum");
	brightnum = document.getElementById("brightnum");
	hueback = document.getElementById("hueback");
	satback = document.getElementById("satback");
	brightback = document.getElementById("brightback");

	stack(hueback, hueslide);
	stack(satback, satslide);
	stack(brightback, brightslide);

	rgbsliders = [redslide, greenslide, blueslide];
	for (var i = 0; i < 3; ++i) {
		rgbsliders[i].addEventListener("input", updategroundrgb);
	}

	hsbsliders = [hueslide, satslide, brightslide];
	for (var i = 0; i < 3; ++i) {
		hsbsliders[i].addEventListener("input", updategroundhsb);
	}

	preview.addEventListener("click", copycolorinteractive);

	updategroundrgb();
	updatehsbbackground();
}
/*@*/</script>

@%/site/tail.html@
