<!DOCTYPE html>

<html>
  <head>
    <title>A youtube stream viewer</title>
  </head>
  <body>
    <style>
#content {
  width: 100%;
  height: 100%;
}
#mainChat {
  position: absolute;
  width: 50%;
  height: 100%;
  left: 0;
  top: 0;
  overflow: scroll;
}
#pinnedChat {
  position: absolute;
  width: 50%;
  height: 100%;
  left: 50%;
  top: 0;
  overflow: scroll;
}

.memberUser {
  color: #1e46e8;
}

.superchatUser {
  color: #43bd1a;
}

.message:hover {
  cursor: pointer;
}
    </style>
    <noscript>
      <p>This website requires javascript to function</p>
    </noscript>
    <div id=content>
    </div>
    <script>@&
// this was copied directly from here
// https://developers.google.com/youtube/v3/live/guides/auth/client-side-web-apps
function oauthSignIn() {
  // Google's OAuth 2.0 endpoint for requesting an access token
  var oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';

  // Create <form> element to submit parameters to OAuth 2.0 endpoint.
  var form = document.createElement('form');
  form.setAttribute('method', 'GET'); // Send as a GET request.
  form.setAttribute('action', oauth2Endpoint);

  // Parameters to pass to OAuth 2.0 endpoint.
  var params = {'client_id': '788686907287-5hut5u9ipkocve103pns263cs7os9roa.apps.googleusercontent.com',
                'redirect_uri': 'https://natechoe.dev/misc/tools/streamview/index.html',
                'response_type': 'token',
                'scope': 'https://www.googleapis.com/auth/youtube.readonly',
                'include_granted_scopes': 'true',
                'state': 'pass-through value'};

  // Add form parameters as hidden input values.
  for (var p in params) {
    var input = document.createElement('input');
    input.setAttribute('type', 'hidden');
    input.setAttribute('name', p);
    input.setAttribute('value', params[p]);
    form.appendChild(input);
  }

  // Add form to page and submit it to open the OAuth 2.0 endpoint.
  document.body.appendChild(form);
  form.submit();
}

function login() {
  var msg = document.createElement("p");
  var button = document.createElement("button");
  var tos = document.createElement("p");
  var tosLink = document.createElement("a");
  tosLink.textContent = "By using this program, you agree to the terms of service.";
  tosLink.href = "privacy-policy.html";
  tos.appendChild(tosLink);
  console.log(tos);
  msg.textContent = "Press this button to sign in with Google";
  button.addEventListener("click", oauthSignIn);
  button.textContent = "Sign in with Google";
  var contentDiv = document.getElementById("content");
  contentDiv.appendChild(tos);
  contentDiv.appendChild(msg);
  contentDiv.appendChild(button);
}

function constructURI(base, params) {
  return `${base}?${(new URLSearchParams(params)).toString()}`
}

async function sendRequest(method, uri, params, token) {
  const req = new XMLHttpRequest();
  var responsePromise = new Promise((resolve) => {
    req.addEventListener("load", function() {
      resolve(this.responseText);
    });
  });
  req.open(method, constructURI(uri, params));
  if (token) {
    req.setRequestHeader("Authorization", `Bearer ${token}`);
  }
  req.send();
  var response = await responsePromise;
  return JSON.parse(response);
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function addGenericChat(message, user, spanClass, mainDiv, pinnedDiv, autoPin) {
  var makeNode = function() {
    var userDetails = document.createElement("span");
    userDetails.classList.add(spanClass);
    userDetails.textContent = user;
    var textNode = document.createTextNode(`: ${message}`);
    var ret = document.createElement("p");
    ret.classList.add("message");
    ret.appendChild(userDetails);
    ret.appendChild(textNode);
    return ret;
  }

  var isPinned = false;

  var pinMessage = function() {
    if (isPinned) {
      return;
    }
    isPinned = true;
    var newNode = makeNode();
    newNode.addEventListener("click", function() {
      isPinned = false;
      newNode.remove();
    });
    pinnedDiv.appendChild(newNode);
  }

  var normalNode = makeNode();
  normalNode.addEventListener("click", pinMessage);
  if (autoPin) {
    pinMessage();
  }
  mainDiv.appendChild(normalNode);
}

function addSuperChat(message, mainDiv, pinnedDiv) {
  var snippet = message.snippet;
  var messageDetails = snippet.superChatDetails;

  var authorDetails = message.authorDetails;
  var authorName = authorDetails.displayName;
  var amount = `${messageDetails.amountDisplayString} ${messageDetails.currency}`;
  var message = messageDetails.userComment;

  var userDisplay = `${authorName} [${amount}]`

  addGenericChat(message, userDisplay, "superchatUser", mainDiv, pinnedDiv, true);
}

function addChat(message, mainDiv, pinnedDiv) {
  var snippet = message.snippet;
  var messageDetails = snippet.textMessageDetails;
  var authorDetails = message.authorDetails;

  var authorName = authorDetails.displayName;
  var isMember = authorDetails.isChatSponsor;
  var messageText = messageDetails.messageText;
  var spanType = isMember ? "memberUser" : "normalUser";

  addGenericChat(messageText, authorName, spanType, mainDiv, pinnedDiv, isMember);
}

async function processMessageBatch(messageBatch, mainDiv, pinnedDiv) {
  messageBatch.items.forEach(function(message) {
    var snippet = message.snippet;
    if (snippet.type == "chatEndedEvent") {
      return true;
    }
    if (snippet.type == "tombstone" || !snippet.hasDisplayContent) {
      return false;
    }
    switch (snippet.type) {
    case "superChatEvent": addSuperChat(message, mainDiv, pinnedDiv);
    case "textMessageEvent": addChat(message, mainDiv, pinnedDiv);
    //case "membershipGiftingEvent": addMembershipGift(message, mainDiv, pinnedDiv);
    default: return false;
    }
  });
}

async function showChat(chatId, token) {
  var contentDiv = document.getElementById("content");
  var mainDiv = document.createElement("div");
  mainDiv.id = "mainChat";
  contentDiv.appendChild(mainDiv);
  var pinnedDiv = document.createElement("div");
  pinnedDiv.id = "pinnedChat";
  contentDiv.appendChild(pinnedDiv);
  var currPage = ""

  while (true) {
    var messageBatch = await sendRequest("GET", "https://www.googleapis.com/youtube/v3/liveChat/messages", {
      liveChatId: chatId,
      part: "snippet,authorDetails",
      pageToken: currPage,
      key: "AIzaSyAE--12lqfcV3puPEKO26XmeQD0LFKKrfo",
      //profileImageSize: 16,
    }, token);

    if (await processMessageBatch(messageBatch, mainDiv, pinnedDiv)) {
      break;
    }

    currPage = messageBatch.nextPageToken;
    await sleep(messageBatch.pollingIntervalMillis);
  }
}

async function runViewer(token) {
  var broadcastList = await sendRequest("GET", "https://www.googleapis.com/youtube/v3/liveBroadcasts", {
    part: "snippet",
    mine: true,
  }, token);

  var containerDiv = document.getElementById("content");

  if (!broadcastList.items || broadcastList.items.length < 1) {
    var msgBox = document.createElement("p");
    msgBox.textContent = "Failed to find your livestream :( Try refreshing this page.";
    containerDiv.appendChild(msgBox);
    return;
  }

  var chatId = broadcastList.items[0].snippet.liveChatId;
  showChat(chatId, token);
}

function main() {
  if (!location.hash) {
    login();
    return;
  }
  var parts = location.hash.substr(1).split("&");
  var oauthToken = null;
  parts.forEach(function(part) {
    var item = part.split("=");
    if (item.length != 2) {
      return;
    }
    var key = decodeURIComponent(item[0]);
    var value = decodeURIComponent(item[1]);
    if (key == "access_token") {
      oauthToken = value;
    }
  });
  if (!oauthToken) {
    login();
    return;
  }
  runViewer(oauthToken);
}

main();
@
    </script>
  </body>
</html>
