//This code has been slightly modified from the original commit that I took it
//from (the original commit was broken), but it's still GPLed. This code is also
//untested.
void *runServer(RunnerArgs *args) {
        Sitefile *site = args->site;
        int *pending = args->pending;
        int notify = args->notify;
        int id = args->id;

        int allocConns = 100;
        struct pollfd *fds = malloc(sizeof(struct pollfd) * allocConns);
        Connection *connections = malloc(sizeof(Connection) * allocConns);
        assert(fds != NULL);
        assert(connections != NULL);
        fds[0].fd = notify;
        fds[0].events = POLLIN;
        int connCount = 1;
        //connections are no longer linked lists, and are now stored in a
        //parallel array to fds. Note that connections are 1 indexed, as fds[0]
        //is the connection to the main thread.

        for (;;) {
                poll(fds, connCount, -1);
                //wait for either a message from the main thread or one of the
                //connections.

                for (int i = 1; i < connCount; i++) {
                        //go through all the connections
                        if (updateConnection(connections + i, site)) {
                                connCount--;
                                freeConnection(connections + i);
                                memcpy(fds + i, fds + connCount,
                                                sizeof(struct pollfd));
                                memcpy(connections + i, connections + connCount,
                                                sizeof(Connection));
                                pending[id]--;
                                //if a connection should be removed, remove it
                                //by moving the last item to the removed
                                //position
                        }
                }

                if (fds[0].revents == POLLIN) {
                        //if there's a new connection to accept
                        if (connCount >= allocConns) {
                                allocConns *= 2;
                                struct pollfd *newfds = realloc(fds,
                                        sizeof(struct pollfd) * allocConns);
                                if (newfds == NULL)
                                        exit(EXIT_FAILURE);
                                fds = newfds;

                                Connection *newconns = realloc(connections,
                                        sizeof(Connection) * allocConns);
                                if (newconns == NULL)
                                        exit(EXIT_FAILURE);
                                connections = newconns;
                        }
                        int newfd;
                        if (read(notify, &newfd, sizeof(newfd)) < sizeof(newfd))
                                exit(EXIT_FAILURE);
                        fds[connCount].fd = newfd;
                        fds[connCount].events = POLLIN;

                        if (newConnection(newfd, connections + connCount))
                                exit(EXIT_FAILURE);
                        connCount++;
                        pending[id]++;
                        //accept it
                }
        }
        return NULL;
}

